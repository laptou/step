{
  "extends": [
    "google",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "react"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": [
      "off"
    ],
    "@typescript-eslint/no-var-requires": [
      "off"
    ],
    "@typescript-eslint/no-non-null-assertion": [
      "off"
    ],
    "@typescript-eslint/no-explicit-any": [
      "off"
    ],
    "@typescript-eslint/member-ordering": [
      "error",
      {
        "default": [
          // Index signature
          "signature",
          // Static
          "private-static-field",
          "protected-static-field",
          "public-static-field",
          "private-static-method",
          "protected-static-method",
          "public-static-method",
          "private-instance-field",
          "protected-instance-field",
          "public-instance-field",
          // Constructors
          "private-constructor",
          "protected-constructor",
          "public-constructor",
          // Methods
          "private-instance-method",
          "protected-instance-method",
          "public-instance-method",
          // Abstract
          "private-abstract-field",
          "protected-abstract-field",
          "public-abstract-field",
          "private-abstract-method",
          "protected-abstract-method",
          "public-abstract-method"
        ]
      }
    ],
    "@typescript-eslint/explicit-member-accessibility": [
      "warn",
      {
        "accessibility": "explicit"
      }
    ],
    "@typescript-eslint/prefer-readonly": [
      "warn"
    ],
    "@typescript-eslint/unbound-method": [
      "warn"
    ],
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "Surplus",
        "args": "after-used",
        "ignoreRestSiblings": true
      }
    ],
    "@typescript-eslint/indent": [
      "error",
      2,
      {
        "ignoredNodes": [
          "JSXElement *",
          "JSXElement",
          "TemplateLiteral *"
        ]
      }
    ],
    "@typescript-eslint/no-unsafe-member-access": ["warn"],
    "@typescript-eslint/no-unsafe-assignment": ["warn"],
    "@typescript-eslint/no-unsafe-return": ["warn"],
    "@typescript-eslint/no-unsafe-call": ["warn"],
    "react/jsx-uses-vars": [
      "warn"
    ],
    "react/jsx-first-prop-new-line": [
      "error",
      "never"
    ],
    "react/jsx-indent-props": [
      "error",
      "first"
    ],
    "valid-jsdoc": [
      "error",
      {
        // this is TypeScript, so we don't need types in JSDoc
        "requireParamType": false,
        "requireReturnType": false,
        // don't require @return if the function doesn't return anything
        "requireReturn": false
      }
    ],
    "new-cap": [
      "off"
    ],
    // handled by TS indent rule
    "indent": [
      "off"
    ],
    "max-len": [
      "warn",
      {
        "code": 100
      }
    ]
  }
}
